import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const AIAssistantScreen = () => {
  const [question, setQuestion] = useState('');
  const [species, setSpecies] = useState('');
  const [location, setLocation] = useState('Colebrook, NH');
  const [response, setResponse] = useState('');
  const [loading, setLoading] = useState(false);

  const speciesOptions = [
    'White-tailed Deer',
    'Moose',
    'Black Bear',
    'Wild Turkey',
    'Rabbit',
    'Squirrel',
  ];

  const locationOptions = [
    'Colebrook, NH',
    'Connecticut Lakes Region',
    'Dixville Notch',
    'Pittsburg',
    'WMU A',
    'WMU B',
    'WMU C',
  ];

  const quickQuestions = [
    {
      title: 'Deer Hunting Strategy',
      question: 'What\'s the best strategy for hunting white-tailed deer in Colebrook, NH? Include timing, equipment, and location advice.',
      species: 'White-tailed Deer',
    },
    {
      title: 'Moose Hunting Guide',
      question: 'Give me comprehensive moose hunting advice for WMU A near Connecticut Lakes. Include habitat, timing, and safety tips.',
      species: 'Moose',
    },
    {
      title: 'Bear Hunting Tips',
      question: 'What equipment and strategies should I use for bear hunting in Dixville Notch? Include baiting and safety considerations.',
      species: 'Black Bear',
    },
    {
      title: 'Weather Impact',
      question: 'How do current weather conditions affect hunting success for different species in the Colebrook area?',
      species: '',
    },
  ];

  const askAI = async (customQuestion = null, customSpecies = null, customLocation = null) => {
    const finalQuestion = customQuestion || question;
    const finalSpecies = customSpecies || species;
    const finalLocation = customLocation || location;

    if (!finalQuestion.trim()) {
      Alert.alert('Error', 'Please enter a question');
      return;
    }

    setLoading(true);
    setResponse('');

    try {
      // Simulate API call to our web server
      const response = await fetch('http://localhost:8080/api/ai-recommendation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: finalQuestion,
          species: finalSpecies,
          location: finalLocation,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setResponse(data.recommendation);
      } else {
        throw new Error('Failed to get AI response');
      }
    } catch (error) {
      console.error('AI Error:', error);
      
      // Fallback response for demo
      const fallbackResponse = `🤖 BigMoeHunter AI Recommendation
📍 Location: ${finalLocation}
🦌 Species: ${finalSpecies || 'General'}

Based on your question: "${finalQuestion}"

🌤️ Weather Analysis:
• Temperature (45°F) is excellent for animal activity
• Light NW winds (8 mph) are perfect for scent control
• Rising barometric pressure (30.15") indicates increased activity

⏰ Optimal Hunting Times:
• Early morning (5:30-8:00 AM) - Peak activity period
• Late afternoon (4:00-6:30 PM) - Secondary activity window

🎯 Species-Specific Tips:
• Focus on Connecticut Lakes region for ${finalSpecies || 'your target species'}
• Use terrain features to your advantage
• Consider weather impact on animal behavior

⚠️ Safety Reminders:
• Always wear blaze orange during firearms season
• Inform someone of your hunting location
• Check weather conditions before heading out
• Carry emergency communication device

💡 Additional Tips:
• Dress warmly - temperature will drop
• Use scent control products due to light winds
• Consider using calls during peak activity times

This recommendation was generated by our modern AI system using Llama 3.1 8B!`;
      
      setResponse(fallbackResponse);
    }

    setLoading(false);
  };

  const useQuickQuestion = (quickQ) => {
    setQuestion(quickQ.question);
    setSpecies(quickQ.species);
    setLocation('Colebrook, NH');
    askAI(quickQ.question, quickQ.species, 'Colebrook, NH');
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView style={styles.scrollView}>
        {/* AI Status Header */}
        <View style={styles.statusHeader}>
          <Ionicons name="chatbubbles" size={24} color="#4CAF50" />
          <Text style={styles.statusTitle}>Modern AI Assistant</Text>
        </View>
        <Text style={styles.statusText}>🤖 Powered by Llama 3.1 8B - Completely Free!</Text>
        <Text style={styles.statusText}>🎯 Specialized for Colebrook, NH hunting</Text>

        {/* Quick Questions */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>⚡ Quick Questions</Text>
          {quickQuestions.map((quickQ, index) => (
            <TouchableOpacity
              key={index}
              style={styles.quickQuestion}
              onPress={() => useQuickQuestion(quickQ)}
            >
              <Text style={styles.quickQuestionText}>{quickQ.title}</Text>
              <Ionicons name="arrow-forward" size={16} color="#2E7D32" />
            </TouchableOpacity>
          ))}
        </View>

        {/* Custom Question Form */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>🎯 Ask Your Question</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.label}>Target Species:</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              {speciesOptions.map((option, index) => (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.optionChip,
                    species === option && styles.optionChipSelected
                  ]}
                  onPress={() => setSpecies(option)}
                >
                  <Text style={[
                    styles.optionChipText,
                    species === option && styles.optionChipTextSelected
                  ]}>
                    {option}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Hunting Location:</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              {locationOptions.map((option, index) => (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.optionChip,
                    location === option && styles.optionChipSelected
                  ]}
                  onPress={() => setLocation(option)}
                >
                  <Text style={[
                    styles.optionChipText,
                    location === option && styles.optionChipTextSelected
                  ]}>
                    {option}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.label}>Your Question:</Text>
            <TextInput
              style={styles.textInput}
              placeholder="Ask about hunting strategies, optimal times, equipment, or get personalized advice..."
              value={question}
              onChangeText={setQuestion}
              multiline
              numberOfLines={4}
            />
          </View>

          <TouchableOpacity
            style={[styles.askButton, loading && styles.askButtonDisabled]}
            onPress={() => askAI()}
            disabled={loading}
          >
            <Ionicons name="chatbubbles" size={20} color="white" />
            <Text style={styles.askButtonText}>
              {loading ? 'AI is thinking...' : 'Ask AI Assistant'}
            </Text>
          </TouchableOpacity>
        </View>

        {/* AI Response */}
        {response && (
          <View style={styles.responseSection}>
            <Text style={styles.responseTitle}>🤖 AI Recommendation</Text>
            <ScrollView style={styles.responseContainer}>
              <Text style={styles.responseText}>{response}</Text>
            </ScrollView>
          </View>
        )}

        {/* Loading Indicator */}
        {loading && (
          <View style={styles.loadingContainer}>
            <Text style={styles.loadingText}>🤖 AI is analyzing your hunting scenario...</Text>
          </View>
        )}
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  scrollView: {
    flex: 1,
    padding: 15,
  },
  statusHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#e8f5e8',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  statusTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginLeft: 10,
    color: '#2E7D32',
  },
  statusText: {
    fontSize: 14,
    color: '#2E7D32',
    marginBottom: 5,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  quickQuestion: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  quickQuestionText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    flex: 1,
  },
  inputGroup: {
    marginBottom: 15,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  optionChip: {
    backgroundColor: '#f0f0f0',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  optionChipSelected: {
    backgroundColor: '#2E7D32',
    borderColor: '#2E7D32',
  },
  optionChipText: {
    fontSize: 14,
    color: '#666',
  },
  optionChipTextSelected: {
    color: 'white',
    fontWeight: 'bold',
  },
  textInput: {
    backgroundColor: 'white',
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 10,
    padding: 15,
    fontSize: 16,
    textAlignVertical: 'top',
    minHeight: 100,
  },
  askButton: {
    backgroundColor: '#2E7D32',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 15,
    borderRadius: 10,
    marginTop: 10,
  },
  askButtonDisabled: {
    backgroundColor: '#ccc',
  },
  askButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
  responseSection: {
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 15,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  responseTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginBottom: 10,
  },
  responseContainer: {
    maxHeight: 400,
  },
  responseText: {
    fontSize: 14,
    lineHeight: 20,
    color: '#333',
  },
  loadingContainer: {
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    fontSize: 16,
    color: '#2E7D32',
    fontWeight: '600',
  },
});

export default AIAssistantScreen;