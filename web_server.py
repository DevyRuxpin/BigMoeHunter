#!/usr/bin/env python3
"""
BigMoeHunter Web Backend
Simple Flask server to connect web interface with Ollama AI
"""

import subprocess
import json
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
from app.services.hunting_data_service import hunting_data_manager
from app.services.advanced_hunting_analytics_service import advanced_hunting_analytics
from app.services.free_news_service import free_news_service
from app.services.accurate_weather_service import accurate_weather_service
from app.services.real_hunting_spots_service import real_hunting_spots_service

app = Flask(__name__)
CORS(app)  # Enable CORS for web interface

@app.route('/')
def serve_web_interface():
    """Serve the main web interface"""
    return send_from_directory('.', 'modern_ui.html')

@app.route('/advanced')
def serve_advanced_interface():
    """Serve the advanced web interface"""
    return send_from_directory('.', 'advanced_web_interface.html')

@app.route('/basic')
def serve_basic_interface():
    """Serve the basic web interface"""
    return send_from_directory('.', 'web_interface.html')

@app.route('/api/ai-recommendation', methods=['POST'])
def get_ai_recommendation():
    """Get AI recommendation from Ollama"""
    try:
        data = request.get_json()
        question = data.get('question', '')
        species = data.get('species', '')
        location = data.get('location', '')
        
        if not question:
            return jsonify({'error': 'No question provided'}), 400
        
        # Create a comprehensive prompt for the AI
        prompt = f"""As an expert hunting guide specializing in {location}, provide comprehensive hunting advice.

Question: {question}

Please provide:
1. Detailed analysis of the hunting scenario
2. Specific recommendations based on current conditions
3. Equipment and strategy advice
4. Safety considerations
5. Local area tips and insights

Format your response in a clear, organized manner with specific, actionable advice."""

        # Call Ollama with the prompt
        result = subprocess.run([
            'ollama', 'run', 'llama3.1:8b', prompt
        ], capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            response = result.stdout.strip()
            
            # Add some metadata to the response
            enhanced_response = f"""ü§ñ BigMoeHunter AI Recommendation
üìç Location: {location}
ü¶å Species: {species}

{response}

---
üí° Generated by Llama 3.1 AI | üÜì Completely Free | üéØ Colebrook, NH Specialized"""
            
            return jsonify({
                'recommendation': enhanced_response,
                'species': species,
                'location': location,
                'ai_model': 'Llama 3.1 8B',
                'confidence': 0.95
            })
        else:
            return jsonify({'error': f'Ollama error: {result.stderr}'}), 500
            
    except subprocess.TimeoutExpired:
        return jsonify({'error': 'AI request timed out'}), 504
    except Exception as e:
        return jsonify({'error': f'Server error: {str(e)}'}), 500

@app.route('/api/weather', methods=['GET'])
def get_weather():
    """Get current weather data from accurate weather service"""
    try:
        weather_data = accurate_weather_service.get_current_weather()
        return jsonify(weather_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/real-weather-forecast')
def get_real_weather_forecast():
    """Get accurate 7-day weather forecast"""
    try:
        forecast = accurate_weather_service.get_7_day_forecast()
        return jsonify(forecast)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/weather-alerts')
def get_weather_alerts():
    """Get weather alerts for the area"""
    try:
        alerts = accurate_weather_service.get_weather_alerts()
        return jsonify(alerts)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/quick-tips/<species>')
def get_quick_tips(species):
    """Get quick tips for specific species"""
    tips = {
        'deer': {
            'title': 'White-tailed Deer Hunting Tips',
            'tips': [
                'Hunt during dawn and dusk for peak activity',
                'Use scent control products',
                'Focus on food sources and travel corridors',
                'Look for fresh scrapes and rubs',
                'Consider weather impact on movement'
            ]
        },
        'moose': {
            'title': 'Moose Hunting Tips',
            'tips': [
                'Focus on WMU A and B areas',
                'Look for water sources and wetlands',
                'Hunt during early morning and evening',
                'Use calls during rut season',
                'Be prepared for challenging terrain'
            ]
        },
        'bear': {
            'title': 'Black Bear Hunting Tips',
            'tips': [
                'Focus on Dixville Notch area',
                'Look for berry patches and food sources',
                'Use bait stations where legal',
                'Hunt during early morning and late afternoon',
                'Always carry bear spray'
            ]
        }
    }
    
    return jsonify(tips.get(species.lower(), {'title': 'General Tips', 'tips': ['Check local regulations', 'Practice safety first']}))

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'BigMoeHunter Web API',
        'ai_status': 'Ollama + Llama 3.1 Ready',
        'features': 'Advanced Analytics, Comprehensive Data, Real-time Predictions'
    })

@app.route('/api/hunting-data/<species>')
def get_hunting_data(species):
    """Get comprehensive hunting data for specific species"""
    try:
        data = hunting_data_manager.hunting_data["species"].get(species)
        if not data:
            return jsonify({'error': 'Species not found'}), 404
        
        return jsonify({
            'species': species,
            'data': data,
            'colebrook_specific': data.get('colebrook_specific', {}),
            'equipment': data.get('equipment', {}),
            'strategies': data.get('strategies', {}),
            'habitat': data.get('habitat_preferences', {})
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/hunting-analytics', methods=['POST'])
def get_hunting_analytics():
    """Get real hunting analytics and predictions"""
    try:
        data = request.get_json()
        species = data.get('species', 'White-tailed Deer')
        location = data.get('location', 'Colebrook, NH')
        weather_data = data.get('weather', {
            'temperature': 45,
            'wind_speed': 8,
            'condition': 'Partly Cloudy',
            'pressure': 30.15
        })
        
        analytics = advanced_hunting_analytics.analyze_hunting_conditions(species, weather_data, location)
        
        return jsonify(analytics)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/hunting-forecast')
def get_hunting_forecast():
    """Get hunting forecast for next 7 days"""
    try:
        days = request.args.get('days', 7, type=int)
        forecast = real_hunting_analytics.get_hunting_forecast(days)
        return jsonify(forecast)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/hunting-calendar/<int:month>')
def get_hunting_calendar(month):
    """Get hunting calendar for specific month"""
    try:
        calendar = hunting_data_manager.get_hunting_calendar(month)
        return jsonify(calendar)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/hunting-spots')
def get_hunting_spots():
    """Get detailed hunting spot information"""
    try:
        species = request.args.get('species')
        location_type = request.args.get('type')
        spots = real_hunting_spots_service.get_hunting_spots(species, location_type)
        return jsonify(spots)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/real-hunting-spots')
def get_real_hunting_spots():
    """Get real Co√∂s County hunting spots with harvest data"""
    try:
        species = request.args.get('species')
        location_type = request.args.get('type')
        spots = real_hunting_spots_service.get_hunting_spots(species, location_type)
        return jsonify(spots)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/harvest-statistics')
def get_harvest_statistics():
    """Get comprehensive harvest statistics"""
    try:
        stats = real_hunting_spots_service.get_harvest_statistics()
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/access-points')
def get_access_points():
    """Get detailed access point information"""
    try:
        access_points = real_hunting_spots_service.get_access_points()
        return jsonify(access_points)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/search-hunting-spots')
def search_hunting_spots():
    """Search hunting spots by query"""
    try:
        query = request.args.get('q', '')
        if not query:
            return jsonify({'error': 'Query parameter required'}), 400
        
        results = real_hunting_spots_service.search_spots(query)
        return jsonify(results)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/hunting-tips')
def get_hunting_tips():
    """Get comprehensive hunting tips"""
    try:
        tips = hunting_data_manager.hunting_tips
        return jsonify(tips)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/moon-phases')
def get_moon_phases():
    """Get moon phase information"""
    try:
        moon_data = hunting_data_manager.moon_phases
        return jsonify(moon_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/weather-patterns')
def get_weather_patterns():
    """Get weather pattern analysis"""
    try:
        patterns = hunting_data_manager.weather_patterns
        return jsonify(patterns)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/local-news')
def get_local_news():
    """Get free local news from New Hampshire sources"""
    try:
        source_type = request.args.get('type', 'all')
        limit = request.args.get('limit', 10, type=int)
        
        news = free_news_service.get_free_news(source_type, limit)
        return jsonify(news)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/hunting-news')
def get_hunting_news():
    """Get hunting and outdoor specific free news"""
    try:
        limit = request.args.get('limit', 5, type=int)
        news = free_news_service.get_hunting_news(limit)
        return jsonify(news)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/colebrook-news')
def get_colebrook_news():
    """Get free news specifically relevant to Colebrook area"""
    try:
        limit = request.args.get('limit', 5, type=int)
        news = free_news_service.get_local_news(limit)
        return jsonify(news)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/news-sources')
def get_news_sources():
    """Get available free news sources"""
    try:
        sources = free_news_service.get_news_sources()
        return jsonify(sources)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/sports-news')
def get_sports_news():
    """Get sports news from radio stations"""
    try:
        station = request.args.get('station', '985')
        limit = request.args.get('limit', 5, type=int)
        
        # Map station codes to names and keywords
        station_config = {
            '985': {
                'name': '98.5 The Sports Hub',
                'keywords': ['patriots', 'red sox', 'celtics', 'bruins', 'boston sports', 'new england']
            },
            'weei': {
                'name': 'WEEI 93.7',
                'keywords': ['boston sports', 'patriots', 'red sox', 'celtics', 'bruins', 'new england']
            },
            'espn': {
                'name': 'ESPN Radio',
                'keywords': ['nfl', 'mlb', 'nba', 'nhl', 'sports', 'patriots', 'red sox', 'celtics', 'bruins']
            },
            'all': {
                'name': 'All Sports Stations',
                'keywords': ['sports', 'nfl', 'mlb', 'nba', 'nhl', 'boston', 'patriots', 'red sox', 'celtics', 'bruins']
            }
        }
        
        config = station_config.get(station, station_config['all'])
        
        # Get sports news from the free news service
        news = free_news_service.get_sports_news(config['keywords'], limit)
        
        # Add station information
        news['station_name'] = config['name']
        news['station_code'] = station
        
        return jsonify(news)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ Starting BigMoeHunter Web Server...")
    print("üåê Web Interface: http://localhost:8080")
    print("ü§ñ AI Backend: Ollama + Llama 3.1")
    print("ü¶å Specialized for: Colebrook, NH")
    print("=" * 50)
    
    app.run(host='0.0.0.0', port=8080, debug=True)
